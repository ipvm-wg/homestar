// Generated by `wit-bindgen` 0.20.0. DO NOT EDIT!
// Options used:
#[derive(Clone)]
pub struct NumKeys {
    pub name: _rt::String,
    pub val: Option<u32>,
}
impl ::core::fmt::Debug for NumKeys {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("NumKeys")
            .field("name", &self.name)
            .field("val", &self.val)
            .finish()
    }
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_add_one_cabi<T: Guest>(arg0: i32) -> i32 {
    let result0 = T::add_one(arg0);
    _rt::as_i32(result0)
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_append_string_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::append_string(_rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1.into_bytes()).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_append_string<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_join_strings_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: *mut u8,
    arg3: usize,
) -> *mut u8 {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let len1 = arg3;
    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
    let result2 = T::join_strings(_rt::string_lift(bytes0), _rt::string_lift(bytes1));
    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec4 = (result2.into_bytes()).into_boxed_slice();
    let ptr4 = vec4.as_ptr().cast::<u8>();
    let len4 = vec4.len();
    ::core::mem::forget(vec4);
    *ptr3.add(4).cast::<usize>() = len4;
    *ptr3.add(0).cast::<*mut u8>() = ptr4.cast_mut();
    ptr3
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_join_strings<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_host_fmt_current_time_cabi<T: Guest>() -> *mut u8 {
    let result0 = T::host_fmt_current_time();
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1.add(4).cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_host_fmt_current_time<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_transpose_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    let base3 = arg0;
    let len3 = arg1;
    let mut result3 = _rt::Vec::with_capacity(len3);
    for i in 0..len3 {
        let base = base3.add(i * 8);
        let e3 = {
            let l0 = *base.add(0).cast::<*mut u8>();
            let l1 = *base.add(4).cast::<usize>();
            let len2 = l1;

            _rt::Vec::from_raw_parts(l0.cast(), len2, len2)
        };
        result3.push(e3);
    }
    _rt::cabi_dealloc(base3, len3 * 8, 4);
    let result4 = T::transpose(result3);
    let ptr5 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec7 = result4;
    let len7 = vec7.len();
    let layout7 = _rt::alloc::Layout::from_size_align_unchecked(vec7.len() * 8, 4);
    let result7 = if layout7.size() != 0 {
        let ptr = _rt::alloc::alloc(layout7).cast::<u8>();
        if ptr.is_null() {
            _rt::alloc::handle_alloc_error(layout7);
        }
        ptr
    } else {
        {
            ::core::ptr::null_mut()
        }
    };
    for (i, e) in vec7.into_iter().enumerate() {
        let base = result7.add(i * 8);
        {
            let vec6 = (e).into_boxed_slice();
            let ptr6 = vec6.as_ptr().cast::<u8>();
            let len6 = vec6.len();
            ::core::mem::forget(vec6);
            *base.add(4).cast::<usize>() = len6;
            *base.add(0).cast::<*mut u8>() = ptr6.cast_mut();
        }
    }
    *ptr5.add(4).cast::<usize>() = len7;
    *ptr5.add(0).cast::<*mut u8>() = result7;
    ptr5
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_transpose<T: Guest>(arg0: *mut u8) {
    let l3 = *arg0.add(0).cast::<*mut u8>();
    let l4 = *arg0.add(4).cast::<usize>();
    let base5 = l3;
    let len5 = l4;
    for i in 0..len5 {
        let base = base5.add(i * 8);
        {
            let l0 = *base.add(0).cast::<*mut u8>();
            let l1 = *base.add(4).cast::<usize>();
            let base2 = l0;
            let len2 = l1;
            _rt::cabi_dealloc(base2, len2 * 2, 2);
        }
    }
    _rt::cabi_dealloc(base5, len5 * 8, 4);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_blur_cabi<T: Guest>(arg0: *mut u8, arg1: usize, arg2: f32) -> *mut u8 {
    let len0 = arg1;
    let result1 = T::blur(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0), arg2);
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_blur<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_blur_base64_cabi<T: Guest>(arg0: *mut u8, arg1: usize, arg2: f32) -> *mut u8 {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::blur_base64(_rt::string_lift(bytes0), arg2);
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_blur_base64<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_crop_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: i32,
    arg3: i32,
    arg4: i32,
    arg5: i32,
) -> *mut u8 {
    let len0 = arg1;
    let result1 = T::crop(
        _rt::Vec::from_raw_parts(arg0.cast(), len0, len0),
        arg2 as u32,
        arg3 as u32,
        arg4 as u32,
        arg5 as u32,
    );
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_crop<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_crop_base64_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: i32,
    arg3: i32,
    arg4: i32,
    arg5: i32,
) -> *mut u8 {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::crop_base64(
        _rt::string_lift(bytes0),
        arg2 as u32,
        arg3 as u32,
        arg4 as u32,
        arg5 as u32,
    );
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_crop_base64<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_grayscale_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    let len0 = arg1;
    let result1 = T::grayscale(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_grayscale<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_grayscale_base64_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::grayscale_base64(_rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_grayscale_base64<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_rotate90_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    let len0 = arg1;
    let result1 = T::rotate90(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_rotate90<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_rotate90_base64_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::rotate90_base64(_rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_rotate90_base64<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_hash_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    let len0 = arg1;
    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
    let result1 = T::hash(_rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr2.add(4).cast::<usize>() = len3;
    *ptr2.add(0).cast::<*mut u8>() = ptr3.cast_mut();
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_hash<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    let base2 = l0;
    let len2 = l1;
    _rt::cabi_dealloc(base2, len2 * 1, 1);
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_pop_cabi<T: Guest>(arg0: *mut u8, arg1: usize) -> *mut u8 {
    let len0 = arg1;
    let result1 = T::pop(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0));
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    match result1 {
        Some(e) => {
            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
            *ptr2.add(4).cast::<i32>() = _rt::as_i32(e);
        }
        None => {
            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
        }
    };
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_binary_search_cabi<T: Guest>(
    arg0: *mut u8,
    arg1: usize,
    arg2: i32,
) -> *mut u8 {
    let len0 = arg1;
    let result1 = T::binary_search(_rt::Vec::from_raw_parts(arg0.cast(), len0, len0), arg2);
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    match result1 {
        Ok(e) => {
            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
            *ptr2.add(4).cast::<i32>() = _rt::as_i32(e);
        }
        Err(_) => {
            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
        }
    };
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_num_to_kv_cabi<T: Guest>(arg0: i32, arg1: *mut u8, arg2: usize) -> *mut u8 {
    let result1 = T::num_to_kv(match arg0 {
        0 => {
            let e = arg1 as i32 as u32;
            Ok(e)
        }
        1 => {
            let e = {
                let len0 = arg2;
                let bytes0 = _rt::Vec::from_raw_parts(arg1.cast(), len0, len0);

                _rt::string_lift(bytes0)
            };
            Err(e)
        }
        _ => _rt::invalid_enum_discriminant(),
    });
    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let NumKeys {
        name: name3,
        val: val3,
    } = result1;
    let vec4 = (name3.into_bytes()).into_boxed_slice();
    let ptr4 = vec4.as_ptr().cast::<u8>();
    let len4 = vec4.len();
    ::core::mem::forget(vec4);
    *ptr2.add(4).cast::<usize>() = len4;
    *ptr2.add(0).cast::<*mut u8>() = ptr4.cast_mut();
    match val3 {
        Some(e) => {
            *ptr2.add(8).cast::<u8>() = (1i32) as u8;
            *ptr2.add(12).cast::<i32>() = _rt::as_i32(e);
        }
        None => {
            *ptr2.add(8).cast::<u8>() = (0i32) as u8;
        }
    };
    ptr2
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_num_to_kv<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
    fn add_one(a: i32) -> i32;
    fn append_string(a: _rt::String) -> _rt::String;
    fn join_strings(a: _rt::String, b: _rt::String) -> _rt::String;
    fn host_fmt_current_time() -> _rt::String;
    fn transpose(matrix: _rt::Vec<_rt::Vec<u16>>) -> _rt::Vec<_rt::Vec<u16>>;
    fn blur(data: _rt::Vec<u8>, sigma: f32) -> _rt::Vec<u8>;
    fn blur_base64(data: _rt::String, sigma: f32) -> _rt::Vec<u8>;
    fn crop(
        data: _rt::Vec<u8>,
        x: u32,
        y: u32,
        target_width: u32,
        target_height: u32,
    ) -> _rt::Vec<u8>;
    fn crop_base64(
        data: _rt::String,
        x: u32,
        y: u32,
        target_width: u32,
        target_height: u32,
    ) -> _rt::Vec<u8>;
    fn grayscale(data: _rt::Vec<u8>) -> _rt::Vec<u8>;
    fn grayscale_base64(data: _rt::String) -> _rt::Vec<u8>;
    fn rotate90(data: _rt::Vec<u8>) -> _rt::Vec<u8>;
    fn rotate90_base64(data: _rt::String) -> _rt::Vec<u8>;
    fn hash(data: _rt::String) -> _rt::Vec<u8>;
    fn pop(a: _rt::Vec<i32>) -> Option<i32>;
    fn binary_search(slice: _rt::Vec<i32>, x: i32) -> Result<i32, ()>;
    fn num_to_kv(num: Result<u32, _rt::String>) -> NumKeys;
}
#[doc(hidden)]

macro_rules! __export_world_test_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


    #[export_name = "add-one"]
    unsafe extern "C" fn export_add_one(arg0: i32,) -> i32 {
      $($path_to_types)*::_export_add_one_cabi::<$ty>(arg0)
    }

    #[export_name = "append-string"]
    unsafe extern "C" fn export_append_string(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_append_string_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_append-string"]
    unsafe extern "C" fn _post_return_append_string(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_append_string::<$ty>(arg0)
    }

    #[export_name = "join-strings"]
    unsafe extern "C" fn export_join_strings(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
      $($path_to_types)*::_export_join_strings_cabi::<$ty>(arg0, arg1, arg2, arg3)
    }

    #[export_name = "cabi_post_join-strings"]
    unsafe extern "C" fn _post_return_join_strings(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_join_strings::<$ty>(arg0)
    }

    #[export_name = "host-fmt-current-time"]
    unsafe extern "C" fn export_host_fmt_current_time() -> *mut u8 {
      $($path_to_types)*::_export_host_fmt_current_time_cabi::<$ty>()
    }

    #[export_name = "cabi_post_host-fmt-current-time"]
    unsafe extern "C" fn _post_return_host_fmt_current_time(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_host_fmt_current_time::<$ty>(arg0)
    }

    #[export_name = "transpose"]
    unsafe extern "C" fn export_transpose(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_transpose_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_transpose"]
    unsafe extern "C" fn _post_return_transpose(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_transpose::<$ty>(arg0)
    }

    #[export_name = "blur"]
    unsafe extern "C" fn export_blur(arg0: *mut u8,arg1: usize,arg2: f32,) -> *mut u8 {
      $($path_to_types)*::_export_blur_cabi::<$ty>(arg0, arg1, arg2)
    }

    #[export_name = "cabi_post_blur"]
    unsafe extern "C" fn _post_return_blur(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_blur::<$ty>(arg0)
    }

    #[export_name = "blur-base64"]
    unsafe extern "C" fn export_blur_base64(arg0: *mut u8,arg1: usize,arg2: f32,) -> *mut u8 {
      $($path_to_types)*::_export_blur_base64_cabi::<$ty>(arg0, arg1, arg2)
    }

    #[export_name = "cabi_post_blur-base64"]
    unsafe extern "C" fn _post_return_blur_base64(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_blur_base64::<$ty>(arg0)
    }

    #[export_name = "crop"]
    unsafe extern "C" fn export_crop(arg0: *mut u8,arg1: usize,arg2: i32,arg3: i32,arg4: i32,arg5: i32,) -> *mut u8 {
      $($path_to_types)*::_export_crop_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
    }

    #[export_name = "cabi_post_crop"]
    unsafe extern "C" fn _post_return_crop(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_crop::<$ty>(arg0)
    }

    #[export_name = "crop-base64"]
    unsafe extern "C" fn export_crop_base64(arg0: *mut u8,arg1: usize,arg2: i32,arg3: i32,arg4: i32,arg5: i32,) -> *mut u8 {
      $($path_to_types)*::_export_crop_base64_cabi::<$ty>(arg0, arg1, arg2, arg3, arg4, arg5)
    }

    #[export_name = "cabi_post_crop-base64"]
    unsafe extern "C" fn _post_return_crop_base64(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_crop_base64::<$ty>(arg0)
    }

    #[export_name = "grayscale"]
    unsafe extern "C" fn export_grayscale(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_grayscale_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_grayscale"]
    unsafe extern "C" fn _post_return_grayscale(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_grayscale::<$ty>(arg0)
    }

    #[export_name = "grayscale-base64"]
    unsafe extern "C" fn export_grayscale_base64(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_grayscale_base64_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_grayscale-base64"]
    unsafe extern "C" fn _post_return_grayscale_base64(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_grayscale_base64::<$ty>(arg0)
    }

    #[export_name = "rotate90"]
    unsafe extern "C" fn export_rotate90(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_rotate90_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_rotate90"]
    unsafe extern "C" fn _post_return_rotate90(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_rotate90::<$ty>(arg0)
    }

    #[export_name = "rotate90-base64"]
    unsafe extern "C" fn export_rotate90_base64(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_rotate90_base64_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_rotate90-base64"]
    unsafe extern "C" fn _post_return_rotate90_base64(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_rotate90_base64::<$ty>(arg0)
    }

    #[export_name = "hash"]
    unsafe extern "C" fn export_hash(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_hash_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "cabi_post_hash"]
    unsafe extern "C" fn _post_return_hash(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_hash::<$ty>(arg0)
    }

    #[export_name = "pop"]
    unsafe extern "C" fn export_pop(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_pop_cabi::<$ty>(arg0, arg1)
    }

    #[export_name = "binary-search"]
    unsafe extern "C" fn export_binary_search(arg0: *mut u8,arg1: usize,arg2: i32,) -> *mut u8 {
      $($path_to_types)*::_export_binary_search_cabi::<$ty>(arg0, arg1, arg2)
    }

    #[export_name = "num-to-kv"]
    unsafe extern "C" fn export_num_to_kv(arg0: i32,arg1: *mut u8,arg2: usize,) -> *mut u8 {
      $($path_to_types)*::_export_num_to_kv_cabi::<$ty>(arg0, arg1, arg2)
    }

    #[export_name = "cabi_post_num-to-kv"]
    unsafe extern "C" fn _post_return_num_to_kv(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_num_to_kv::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_test_cabi;

#[repr(align(4))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
pub mod homestar {
    pub mod host {

        #[allow(clippy::all)]
        pub mod helpers {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            #[repr(C)]
            #[derive(Clone, Copy)]
            pub struct Time {
                pub seconds: u64,
                pub milliseconds: u32,
                pub nanoseconds: u32,
            }
            impl ::core::fmt::Debug for Time {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    f.debug_struct("Time")
                        .field("seconds", &self.seconds)
                        .field("milliseconds", &self.milliseconds)
                        .field("nanoseconds", &self.nanoseconds)
                        .finish()
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Get current time in sub-seconds.
            pub fn get_current_time() -> Time {
                unsafe {
                    #[repr(align(8))]
                    struct RetArea([::core::mem::MaybeUninit<u8>; 16]);
                    let mut ret_area = RetArea([::core::mem::MaybeUninit::uninit(); 16]);
                    let ptr0 = ret_area.0.as_mut_ptr().cast::<u8>();
                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "homestar:host/helpers@0.0.1")]
                    extern "C" {
                        #[link_name = "get-current-time"]
                        fn wit_import(_: *mut u8);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8) {
                        unreachable!()
                    }
                    wit_import(ptr0);
                    let l1 = *ptr0.add(0).cast::<i64>();
                    let l2 = *ptr0.add(8).cast::<i32>();
                    let l3 = *ptr0.add(12).cast::<i32>();
                    Time {
                        seconds: l1 as u64,
                        milliseconds: l2 as u32,
                        nanoseconds: l3 as u32,
                    }
                }
            }
            #[allow(unused_unsafe, clippy::all)]
            /// Basic `print` helper.
            pub fn print(msg: &str) {
                unsafe {
                    let vec0 = msg;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "homestar:host/helpers@0.0.1")]
                    extern "C" {
                        #[link_name = "print"]
                        fn wit_import(_: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(ptr0.cast_mut(), len0);
                }
            }
        }
    }
}
pub mod wasi {
    pub mod logging {

        #[allow(clippy::all)]
        pub mod logging {
            #[used]
            #[doc(hidden)]
            #[cfg(target_arch = "wasm32")]
            static __FORCE_SECTION_REF: fn() =
                super::super::super::__link_custom_section_describing_imports;
            /// A log level, describing a kind of message.
            #[repr(u8)]
            #[derive(Clone, Copy, Eq, PartialEq)]
            pub enum Level {
                /// Describes messages about the values of variables and the flow of
                /// control within a program.
                Trace,
                /// Describes messages likely to be of interest to someone debugging a
                /// program.
                Debug,
                /// Describes messages likely to be of interest to someone monitoring a
                /// program.
                Info,
                /// Describes messages indicating hazardous situations.
                Warn,
                /// Describes messages indicating serious errors.
                Error,
                /// Describes messages indicating fatal errors.
                Critical,
            }
            impl ::core::fmt::Debug for Level {
                fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                    match self {
                        Level::Trace => f.debug_tuple("Level::Trace").finish(),
                        Level::Debug => f.debug_tuple("Level::Debug").finish(),
                        Level::Info => f.debug_tuple("Level::Info").finish(),
                        Level::Warn => f.debug_tuple("Level::Warn").finish(),
                        Level::Error => f.debug_tuple("Level::Error").finish(),
                        Level::Critical => f.debug_tuple("Level::Critical").finish(),
                    }
                }
            }

            impl Level {
                pub(crate) unsafe fn _lift(val: u8) -> Level {
                    if !cfg!(debug_assertions) {
                        return ::core::mem::transmute(val);
                    }

                    match val {
                        0 => Level::Trace,
                        1 => Level::Debug,
                        2 => Level::Info,
                        3 => Level::Warn,
                        4 => Level::Error,
                        5 => Level::Critical,

                        _ => panic!("invalid enum discriminant"),
                    }
                }
            }

            #[allow(unused_unsafe, clippy::all)]
            /// Emit a log message.
            ///
            /// A log message has a `level` describing what kind of message is being
            /// sent, a context, which is an uninterpreted string meant to help
            /// consumers group similar messages, and a string containing the message
            /// text.
            pub fn log(level: Level, context: &str, message: &str) {
                unsafe {
                    let vec0 = context;
                    let ptr0 = vec0.as_ptr().cast::<u8>();
                    let len0 = vec0.len();
                    let vec1 = message;
                    let ptr1 = vec1.as_ptr().cast::<u8>();
                    let len1 = vec1.len();

                    #[cfg(target_arch = "wasm32")]
                    #[link(wasm_import_module = "wasi:logging/logging")]
                    extern "C" {
                        #[link_name = "log"]
                        fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize);
                    }

                    #[cfg(not(target_arch = "wasm32"))]
                    fn wit_import(_: i32, _: *mut u8, _: usize, _: *mut u8, _: usize) {
                        unreachable!()
                    }
                    wit_import(
                        level.clone() as i32,
                        ptr0.cast_mut(),
                        len0,
                        ptr1.cast_mut(),
                        len1,
                    );
                }
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::alloc;
    pub unsafe fn invalid_enum_discriminant<T>() -> T {
        if cfg!(debug_assertions) {
            panic!("invalid enum discriminant")
        } else {
            core::hint::unreachable_unchecked()
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_test_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_test_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_test_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.20.0:test:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 948] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb9\x06\x01A\x02\x01\
A-\x01B\x04\x01m\x06\x05trace\x05debug\x04info\x04warn\x05error\x08critical\x04\0\
\x05level\x03\0\0\x01@\x03\x05level\x01\x07contexts\x07messages\x01\0\x04\0\x03l\
og\x01\x02\x03\x01\x14wasi:logging/logging\x05\0\x01B\x06\x01r\x03\x07secondsw\x0c\
millisecondsy\x0bnanosecondsy\x04\0\x04time\x03\0\0\x01@\0\0\x01\x04\0\x10get-cu\
rrent-time\x01\x02\x01@\x01\x03msgs\x01\0\x04\0\x05print\x01\x03\x03\x01\x1bhome\
star:host/helpers@0.0.1\x05\x01\x01ky\x01r\x02\x04names\x03val\x02\x03\0\x08num-\
keys\x03\0\x03\x01@\x01\x01az\0z\x04\0\x07add-one\x01\x05\x01@\x01\x01as\0s\x04\0\
\x0dappend-string\x01\x06\x01@\x02\x01as\x01bs\0s\x04\0\x0cjoin-strings\x01\x07\x01\
@\0\0s\x04\0\x15host-fmt-current-time\x01\x08\x01p{\x01p\x09\x01@\x01\x06matrix\x0a\
\0\x0a\x04\0\x09transpose\x01\x0b\x01p}\x01@\x02\x04data\x0c\x05sigmav\0\x0c\x04\
\0\x04blur\x01\x0d\x01@\x02\x04datas\x05sigmav\0\x0c\x04\0\x0bblur-base64\x01\x0e\
\x01@\x05\x04data\x0c\x01xy\x01yy\x0ctarget-widthy\x0dtarget-heighty\0\x0c\x04\0\
\x04crop\x01\x0f\x01@\x05\x04datas\x01xy\x01yy\x0ctarget-widthy\x0dtarget-height\
y\0\x0c\x04\0\x0bcrop-base64\x01\x10\x01@\x01\x04data\x0c\0\x0c\x04\0\x09graysca\
le\x01\x11\x01@\x01\x04datas\0\x0c\x04\0\x10grayscale-base64\x01\x12\x04\0\x08ro\
tate90\x01\x11\x04\0\x0frotate90-base64\x01\x12\x04\0\x04hash\x01\x12\x01pz\x01k\
z\x01@\x01\x01a\x13\0\x14\x04\0\x03pop\x01\x15\x01j\x01z\0\x01@\x02\x05slice\x13\
\x01xz\0\x16\x04\0\x0dbinary-search\x01\x17\x01j\x01y\x01s\x01@\x01\x03num\x18\0\
\x04\x04\0\x09num-to-kv\x01\x19\x04\x01\x1chomestar-functions:test/test\x04\0\x0b\
\x0a\x01\0\x04test\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-compon\
ent\x070.201.0\x10wit-bindgen-rust\x060.20.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
