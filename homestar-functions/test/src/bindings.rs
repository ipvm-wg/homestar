// Generated by `wit-bindgen` 0.16.0. DO NOT EDIT!
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "add-one"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_add_one(arg0: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let result0 = <_GuestImpl as Guest>::add_one(arg0);
    wit_bindgen::rt::as_i32(result0)
  }
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "append-string"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_append_string(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::append_string(wit_bindgen::rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1.into_bytes()).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_append-string"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_append_string(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "join-strings"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_join_strings(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let len1 = arg3 as usize;
    let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
    let result2 = <_GuestImpl as Guest>::join_strings(wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1));
    let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec4 = (result2.into_bytes()).into_boxed_slice();
    let ptr4 = vec4.as_ptr() as i32;
    let len4 = vec4.len() as i32;
    ::core::mem::forget(vec4);
    *((ptr3 + 4) as *mut i32) = len4;
    *((ptr3 + 0) as *mut i32) = ptr4;
    ptr3
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_join-strings"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_join_strings(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "host-fmt-current-time"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_host_fmt_current_time() -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let result0 = <_GuestImpl as Guest>::host_fmt_current_time();
    let ptr1 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr() as i32;
    let len2 = vec2.len() as i32;
    ::core::mem::forget(vec2);
    *((ptr1 + 4) as *mut i32) = len2;
    *((ptr1 + 0) as *mut i32) = ptr2;
    ptr1
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_host-fmt-current-time"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_host_fmt_current_time(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "transpose"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_transpose(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let base3 = arg0;
    let len3 = arg1;
    let mut result3 = Vec::with_capacity(len3 as usize);
    for i in 0..len3 {
      let base = base3 + i * 8;
      let e3 = {
        let l0 = *((base + 0) as *const i32);
        let l1 = *((base + 4) as *const i32);
        let len2 = l1 as usize;
        
        Vec::from_raw_parts(l0 as *mut _, len2, len2)
      };
      result3.push(e3);
    }
    wit_bindgen::rt::dealloc(base3, (len3 as usize) * 8, 4);
    let result4 = <_GuestImpl as Guest>::transpose(result3);
    let ptr5 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec7 = result4;
    let len7 = vec7.len() as i32;
    let layout7 = alloc::Layout::from_size_align_unchecked(vec7.len() * 8, 4);
    let result7 = if layout7.size() != 0
    {
      let ptr = alloc::alloc(layout7);
      if ptr.is_null()
      {
        alloc::handle_alloc_error(layout7);
      }
      ptr
    }else {{
      ::core::ptr::null_mut()
    }};
    for (i, e) in vec7.into_iter().enumerate() {
      let base = result7 as i32 + (i as i32) * 8;
      {
        let vec6 = (e).into_boxed_slice();
        let ptr6 = vec6.as_ptr() as i32;
        let len6 = vec6.len() as i32;
        ::core::mem::forget(vec6);
        *((base + 4) as *mut i32) = len6;
        *((base + 0) as *mut i32) = ptr6;
      }
    }
    *((ptr5 + 4) as *mut i32) = len7;
    *((ptr5 + 0) as *mut i32) = result7 as i32;
    ptr5
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_transpose"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_transpose(arg0: i32,) {
      let l3 = *((arg0 + 0) as *const i32);
      let l4 = *((arg0 + 4) as *const i32);
      let base5 = l3;
      let len5 = l4;
      for i in 0..len5 {
        let base = base5 + i *8;
        {
          let l0 = *((base + 0) as *const i32);
          let l1 = *((base + 4) as *const i32);
          let base2 = l0;
          let len2 = l1;
          wit_bindgen::rt::dealloc(base2, (len2 as usize) * 2, 2);
        }
      }
      wit_bindgen::rt::dealloc(base5, (len5 as usize) * 8, 4);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "blur"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_blur(arg0: i32,arg1: i32,arg2: f32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let result1 = <_GuestImpl as Guest>::blur(Vec::from_raw_parts(arg0 as *mut _, len0, len0), arg2);
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_blur"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_blur(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "blur-base64"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_blur_base64(arg0: i32,arg1: i32,arg2: f32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::blur_base64(wit_bindgen::rt::string_lift(bytes0), arg2);
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_blur-base64"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_blur_base64(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "crop"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_crop(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let result1 = <_GuestImpl as Guest>::crop(Vec::from_raw_parts(arg0 as *mut _, len0, len0), arg2 as u32, arg3 as u32, arg4 as u32, arg5 as u32);
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_crop"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_crop(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "crop-base64"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_crop_base64(arg0: i32,arg1: i32,arg2: i32,arg3: i32,arg4: i32,arg5: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::crop_base64(wit_bindgen::rt::string_lift(bytes0), arg2 as u32, arg3 as u32, arg4 as u32, arg5 as u32);
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_crop-base64"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_crop_base64(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "grayscale"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_grayscale(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let result1 = <_GuestImpl as Guest>::grayscale(Vec::from_raw_parts(arg0 as *mut _, len0, len0));
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_grayscale"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_grayscale(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "grayscale-base64"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_grayscale_base64(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::grayscale_base64(wit_bindgen::rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_grayscale-base64"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_grayscale_base64(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "rotate90"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_rotate90(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let result1 = <_GuestImpl as Guest>::rotate90(Vec::from_raw_parts(arg0 as *mut _, len0, len0));
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_rotate90"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_rotate90(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "rotate90-base64"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_rotate90_base64(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::rotate90_base64(wit_bindgen::rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_rotate90-base64"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_rotate90_base64(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "hash"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_hash(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::hash(wit_bindgen::rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec3 = (result1).into_boxed_slice();
    let ptr3 = vec3.as_ptr() as i32;
    let len3 = vec3.len() as i32;
    ::core::mem::forget(vec3);
    *((ptr2 + 4) as *mut i32) = len3;
    *((ptr2 + 0) as *mut i32) = ptr3;
    ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_hash"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_hash(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      let base2 = l0;
      let len2 = l1;
      wit_bindgen::rt::dealloc(base2, (len2 as usize) * 1, 1);
    }
  };
};
use super::Component as _GuestImpl;
pub trait Guest {
  fn add_one(a: i32,) -> i32;
  fn append_string(a: wit_bindgen::rt::string::String,) -> wit_bindgen::rt::string::String;
  fn join_strings(a: wit_bindgen::rt::string::String,b: wit_bindgen::rt::string::String,) -> wit_bindgen::rt::string::String;
  fn host_fmt_current_time() -> wit_bindgen::rt::string::String;
  fn transpose(matrix: wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::vec::Vec::<u16>>,) -> wit_bindgen::rt::vec::Vec::<wit_bindgen::rt::vec::Vec::<u16>>;
  fn blur(data: wit_bindgen::rt::vec::Vec::<u8>,sigma: f32,) -> wit_bindgen::rt::vec::Vec::<u8>;
  fn blur_base64(data: wit_bindgen::rt::string::String,sigma: f32,) -> wit_bindgen::rt::vec::Vec::<u8>;
  fn crop(data: wit_bindgen::rt::vec::Vec::<u8>,x: u32,y: u32,target_width: u32,target_height: u32,) -> wit_bindgen::rt::vec::Vec::<u8>;
  fn crop_base64(data: wit_bindgen::rt::string::String,x: u32,y: u32,target_width: u32,target_height: u32,) -> wit_bindgen::rt::vec::Vec::<u8>;
  fn grayscale(data: wit_bindgen::rt::vec::Vec::<u8>,) -> wit_bindgen::rt::vec::Vec::<u8>;
  fn grayscale_base64(data: wit_bindgen::rt::string::String,) -> wit_bindgen::rt::vec::Vec::<u8>;
  fn rotate90(data: wit_bindgen::rt::vec::Vec::<u8>,) -> wit_bindgen::rt::vec::Vec::<u8>;
  fn rotate90_base64(data: wit_bindgen::rt::string::String,) -> wit_bindgen::rt::vec::Vec::<u8>;
  fn hash(data: wit_bindgen::rt::string::String,) -> wit_bindgen::rt::vec::Vec::<u8>;
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, vec::Vec, string::String};

#[repr(align(4))]
struct _RetArea([u8; 8]);
static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
pub mod homestar {
  pub mod host {
    
    #[allow(clippy::all)]
    pub mod helpers {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[repr(C)]
      #[derive(Clone, Copy)]
      pub struct Time {
        pub seconds: u64,
        pub milliseconds: u32,
        pub nanoseconds: u32,
      }
      impl ::core::fmt::Debug for Time {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Time").field("seconds", &self.seconds).field("milliseconds", &self.milliseconds).field("nanoseconds", &self.nanoseconds).finish()
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Get current time in sub-seconds.
      pub fn get_current_time() -> Time{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(8))]
          struct RetArea([u8; 16]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let ptr0 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "homestar:host/helpers@0.0.1")]
          extern "C" {
            #[link_name = "get-current-time"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(ptr0);
          let l1 = *((ptr0 + 0) as *const i64);
          let l2 = *((ptr0 + 8) as *const i32);
          let l3 = *((ptr0 + 12) as *const i32);
          Time{
            seconds: l1 as u64,
            milliseconds: l2 as u32,
            nanoseconds: l3 as u32,
          }
        }
      }
      #[allow(unused_unsafe, clippy::all)]
      /// Basic `print` helper.
      pub fn print(msg: &str,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let vec0 = msg;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "homestar:host/helpers@0.0.1")]
          extern "C" {
            #[link_name = "print"]
            fn wit_import(_: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, ){ unreachable!() }
          wit_import(ptr0, len0);
        }
      }
      
    }
    
  }
}
pub mod wasi {
  pub mod logging {
    
    #[allow(clippy::all)]
    pub mod logging {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// A log level, describing a kind of message.
      #[repr(u8)]
      #[derive(Clone, Copy, Eq, PartialEq)]
      pub enum Level {
        /// Describes messages about the values of variables and the flow of
        /// control within a program.
        Trace,
        /// Describes messages likely to be of interest to someone debugging a
        /// program.
        Debug,
        /// Describes messages likely to be of interest to someone monitoring a
        /// program.
        Info,
        /// Describes messages indicating hazardous situations.
        Warn,
        /// Describes messages indicating serious errors.
        Error,
        /// Describes messages indicating fatal errors.
        Critical,
      }
      impl ::core::fmt::Debug for Level {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          match self {
            Level::Trace => {
              f.debug_tuple("Level::Trace").finish()
            }
            Level::Debug => {
              f.debug_tuple("Level::Debug").finish()
            }
            Level::Info => {
              f.debug_tuple("Level::Info").finish()
            }
            Level::Warn => {
              f.debug_tuple("Level::Warn").finish()
            }
            Level::Error => {
              f.debug_tuple("Level::Error").finish()
            }
            Level::Critical => {
              f.debug_tuple("Level::Critical").finish()
            }
          }
        }
      }
      
      impl Level{
        pub(crate) unsafe fn _lift(val: u8) -> Level{
          if !cfg!(debug_assertions) {
            return ::core::mem::transmute(val);
          }
          
          match val {
            0 => Level::Trace,
            1 => Level::Debug,
            2 => Level::Info,
            3 => Level::Warn,
            4 => Level::Error,
            5 => Level::Critical,
            
            _ => panic!("invalid enum discriminant"),
          }
        }
      }
      
      #[allow(unused_unsafe, clippy::all)]
      /// Emit a log message.
      /// 
      /// A log message has a `level` describing what kind of message is being
      /// sent, a context, which is an uninterpreted string meant to help
      /// consumers group similar messages, and a string containing the message
      /// text.
      pub fn log(level: Level,context: &str,message: &str,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          let vec0 = context;
          let ptr0 = vec0.as_ptr() as i32;
          let len0 = vec0.len() as i32;
          let vec1 = message;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "wasi:logging/logging")]
          extern "C" {
            #[link_name = "log"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(level.clone() as i32, ptr0, len0, ptr1, len1);
        }
      }
      
    }
    
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:test"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 824] = [3, 0, 4, 116, 101, 115, 116, 0, 97, 115, 109, 13, 0, 1, 0, 7, 192, 5, 1, 65, 2, 1, 65, 32, 1, 66, 4, 1, 109, 6, 5, 116, 114, 97, 99, 101, 5, 100, 101, 98, 117, 103, 4, 105, 110, 102, 111, 4, 119, 97, 114, 110, 5, 101, 114, 114, 111, 114, 8, 99, 114, 105, 116, 105, 99, 97, 108, 4, 0, 5, 108, 101, 118, 101, 108, 3, 0, 0, 1, 64, 3, 5, 108, 101, 118, 101, 108, 1, 7, 99, 111, 110, 116, 101, 120, 116, 115, 7, 109, 101, 115, 115, 97, 103, 101, 115, 1, 0, 4, 0, 3, 108, 111, 103, 1, 2, 3, 1, 20, 119, 97, 115, 105, 58, 108, 111, 103, 103, 105, 110, 103, 47, 108, 111, 103, 103, 105, 110, 103, 5, 0, 1, 66, 6, 1, 114, 3, 7, 115, 101, 99, 111, 110, 100, 115, 119, 12, 109, 105, 108, 108, 105, 115, 101, 99, 111, 110, 100, 115, 121, 11, 110, 97, 110, 111, 115, 101, 99, 111, 110, 100, 115, 121, 4, 0, 4, 116, 105, 109, 101, 3, 0, 0, 1, 64, 0, 0, 1, 4, 0, 16, 103, 101, 116, 45, 99, 117, 114, 114, 101, 110, 116, 45, 116, 105, 109, 101, 1, 2, 1, 64, 1, 3, 109, 115, 103, 115, 1, 0, 4, 0, 5, 112, 114, 105, 110, 116, 1, 3, 3, 1, 27, 104, 111, 109, 101, 115, 116, 97, 114, 58, 104, 111, 115, 116, 47, 104, 101, 108, 112, 101, 114, 115, 64, 48, 46, 48, 46, 49, 5, 1, 1, 64, 1, 1, 97, 122, 0, 122, 4, 0, 7, 97, 100, 100, 45, 111, 110, 101, 1, 2, 1, 64, 1, 1, 97, 115, 0, 115, 4, 0, 13, 97, 112, 112, 101, 110, 100, 45, 115, 116, 114, 105, 110, 103, 1, 3, 1, 64, 2, 1, 97, 115, 1, 98, 115, 0, 115, 4, 0, 12, 106, 111, 105, 110, 45, 115, 116, 114, 105, 110, 103, 115, 1, 4, 1, 64, 0, 0, 115, 4, 0, 21, 104, 111, 115, 116, 45, 102, 109, 116, 45, 99, 117, 114, 114, 101, 110, 116, 45, 116, 105, 109, 101, 1, 5, 1, 112, 123, 1, 112, 6, 1, 64, 1, 6, 109, 97, 116, 114, 105, 120, 7, 0, 7, 4, 0, 9, 116, 114, 97, 110, 115, 112, 111, 115, 101, 1, 8, 1, 112, 125, 1, 64, 2, 4, 100, 97, 116, 97, 9, 5, 115, 105, 103, 109, 97, 118, 0, 9, 4, 0, 4, 98, 108, 117, 114, 1, 10, 1, 64, 2, 4, 100, 97, 116, 97, 115, 5, 115, 105, 103, 109, 97, 118, 0, 9, 4, 0, 11, 98, 108, 117, 114, 45, 98, 97, 115, 101, 54, 52, 1, 11, 1, 64, 5, 4, 100, 97, 116, 97, 9, 1, 120, 121, 1, 121, 121, 12, 116, 97, 114, 103, 101, 116, 45, 119, 105, 100, 116, 104, 121, 13, 116, 97, 114, 103, 101, 116, 45, 104, 101, 105, 103, 104, 116, 121, 0, 9, 4, 0, 4, 99, 114, 111, 112, 1, 12, 1, 64, 5, 4, 100, 97, 116, 97, 115, 1, 120, 121, 1, 121, 121, 12, 116, 97, 114, 103, 101, 116, 45, 119, 105, 100, 116, 104, 121, 13, 116, 97, 114, 103, 101, 116, 45, 104, 101, 105, 103, 104, 116, 121, 0, 9, 4, 0, 11, 99, 114, 111, 112, 45, 98, 97, 115, 101, 54, 52, 1, 13, 1, 64, 1, 4, 100, 97, 116, 97, 9, 0, 9, 4, 0, 9, 103, 114, 97, 121, 115, 99, 97, 108, 101, 1, 14, 1, 64, 1, 4, 100, 97, 116, 97, 115, 0, 9, 4, 0, 16, 103, 114, 97, 121, 115, 99, 97, 108, 101, 45, 98, 97, 115, 101, 54, 52, 1, 15, 4, 0, 8, 114, 111, 116, 97, 116, 101, 57, 48, 1, 14, 4, 0, 15, 114, 111, 116, 97, 116, 101, 57, 48, 45, 98, 97, 115, 101, 54, 52, 1, 15, 4, 0, 4, 104, 97, 115, 104, 1, 15, 4, 1, 28, 104, 111, 109, 101, 115, 116, 97, 114, 45, 102, 117, 110, 99, 116, 105, 111, 110, 115, 58, 116, 101, 115, 116, 47, 116, 101, 115, 116, 4, 0, 11, 10, 1, 0, 4, 116, 101, 115, 116, 3, 0, 0, 0, 16, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 56, 46, 50, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 54, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
