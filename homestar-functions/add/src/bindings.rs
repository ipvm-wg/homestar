// Generated by `wit-bindgen` 0.20.0. DO NOT EDIT!
// Options used:

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_add_one_cabi<T: Guest>(arg0: i32) -> i32 {
    let result0 = T::add_one(arg0);
    _rt::as_i32(result0)
}

#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_add_two_cabi<T: Guest>(arg0: i32) -> i32 {
    let result0 = T::add_two(arg0);
    _rt::as_i32(result0)
}
pub trait Guest {
    fn add_one(input: i32) -> i32;
    fn add_two(input: i32) -> i32;
}
#[doc(hidden)]

macro_rules! __export_world_add_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


    #[export_name = "add-one"]
    unsafe extern "C" fn export_add_one(arg0: i32,) -> i32 {
      $($path_to_types)*::_export_add_one_cabi::<$ty>(arg0)
    }

    #[export_name = "add-two"]
    unsafe extern "C" fn export_add_two(arg0: i32,) -> i32 {
      $($path_to_types)*::_export_add_two_cabi::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_add_cabi;
mod _rt {

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_add_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_add_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_add_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.20.0:add:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 194] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07I\x01A\x02\x01A\x03\x01\
@\x01\x05inputz\0z\x04\0\x07add-one\x01\0\x04\0\x07add-two\x01\0\x04\x01\x1ahome\
star-functions:add/add\x04\0\x0b\x09\x01\0\x03add\x03\0\0\0G\x09producers\x01\x0c\
processed-by\x02\x0dwit-component\x070.201.0\x10wit-bindgen-rust\x060.20.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
