name: ðŸ§ª Tests and Checks

on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ '**' ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  run-checks:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust-toolchain:
          - stable
          - nightly
          - 1.70.0
        include:
          - os: windows-latest
            rustflags: -C target-feature=+crt-static

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Smarter caching action, speeds up build times compared to regular cache:
      # https://github.com/Swatinem/rust-cache
      - name: Cache Project
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: check-${{ matrix.rust-toolchain }}-${{ matrix.os }}
          save-if: ${{ github.event_name == 'push' }}

      - name: Sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Use mold-linker
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: rui314/setup-mold@v1

      - name: Install Rust Toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          components: rustfmt, clippy
          toolchain: ${{ matrix.rust-toolchain }}

      - name: Override rust-toolchain.toml
        run: rustup override set ${{steps.toolchain.outputs.name}}

      - name: Check Format
        run: cargo fmt --all -- --check

      - name: Run Linter
        run: cargo clippy --all -- -D warnings

      # Check for security advisories
      - name: Check Advisories
        if: ${{ matrix.rust-toolchain == 'stable' && matrix.os == 'ubuntu-latest' }}
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check advisories
        continue-on-error: true

      # Audit licenses, unreleased crates, and unexpected duplicate versions.
      - name: Check Bans, Licenses, and Sources
        if: ${{ matrix.rust-toolchain == 'stable' && matrix.os == 'ubuntu-latest' }}
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check bans licenses sources

      # Only "test" release build on push event.
      - name: Test Release
        if: ${{ matrix.rust-toolchain == 'stable' && github.event_name == 'push' }}
        run: cargo build --workspace --release

  run-tests-all-features:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust-toolchain:
          - stable
          - nightly
        include:
          - os: windows-latest
            rustflags: -C target-feature=+crt-static

    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup IPFS
        uses: ibnesayeed/setup-ipfs@master
        with:
          run_daemon: false

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Project
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: test-all-${{ matrix.rust-toolchain }}-${{ matrix.os }}
          save-if: ${{ github.event_name == 'push' }}

      - name: Sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Use mold-linker
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: rui314/setup-mold@v1

      - name: Install Rust Toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}

      - name: Override rust-toolchain.toml
        run: rustup override set ${{steps.toolchain.outputs.name}}

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Run Tests
        run: cargo nextest run --workspace --profile ci --all-features

      - name: Run Doc Tests
        run: cargo test --doc --workspace

  run-tests-no-default-features:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust-toolchain:
          - stable
          - nightly
        include:
          - os: windows-latest
            rustflags: -C target-feature=+crt-static

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Project
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
          shared-key: test-0-${{ matrix.rust-toolchain }}-${{ matrix.os }}
          save-if: ${{ github.event_name == 'push' }}

      - name: Sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Use mold-linker
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: rui314/setup-mold@v1

      - name: Install Rust Toolchain
        id: toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-toolchain }}

      - name: Override rust-toolchain.toml
        run: rustup override set ${{steps.toolchain.outputs.name}}

      - name: Install nextest
        uses: taiki-e/install-action@nextest

      - name: Run Tests
        run: cargo nextest run --workspace --profile ci --no-default-features --features "test-utils"

  run-docs:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Project
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: doc
          save-if: ${{ github.event_name == 'push' }}

      - name: Sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Use mold-linker
        uses: rui314/setup-mold@v1

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Run Doc(s) compilation
        env:
          RUSTDOCFLAGS: -Dwarnings
        run: cargo doc --workspace --document-private-items
